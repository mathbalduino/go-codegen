"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[882],{5699:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return r},contentTitle:function(){return p},metadata:function(){return l},toc:function(){return c},default:function(){return m}});var a=n(7462),i=n(3366),o=(n(7294),n(3905)),s=["components"],r={sidebar_position:3},p="Helpers",l={unversionedId:"helpers",id:"helpers",isDocsHomePage:!1,title:"Helpers",description:"The library comes with some builtin functions that you can use to ease your code generation:",source:"@site/docs/helpers.md",sourceDirName:".",slug:"/helpers",permalink:"/go-codegen/docs/helpers",editUrl:"https://github.com/mathbalduino/go-codegen/edit/docs/docs/helpers.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"*GoParser API",permalink:"/go-codegen/docs/go-parser-api"},next:{title:"*GoFile",permalink:"/go-codegen/docs/go-file"}},c=[{value:"CallbackOnNamedType",id:"callbackonnamedtype",children:[]},{value:"ResolveTypeIdentifier",id:"resolvetypeidentifier",children:[]},{value:"IdentifierToAsciiTypeName",id:"identifiertoasciitypename",children:[]},{value:"IdentifierToTypeName",id:"identifiertotypename",children:[]},{value:"ObjectIsAccessible",id:"objectisaccessible",children:[]},{value:"TypeIsAccessible",id:"typeisaccessible",children:[]}],d={toc:c};function m(e){var t=e.components,n=(0,i.Z)(e,s);return(0,o.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"helpers"},"Helpers"),(0,o.kt)("p",null,"The library comes with some builtin functions that you can use to ease your code generation:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func CallbackOnNamedType(fieldType types.Type, callback func(obj *types.Named), logger LoggerCLI) { ... }\nfunc ResolveTypeIdentifier(t types.Type, pkgImports GoImports, logger LoggerCLI) string { ... }\nfunc IdentifierToAsciiTypeName(typeIdentifier string) string { ... }\nfunc IdentifierToTypeName(typeIdentifier string) string { ... }\nfunc ObjectIsAccessible(obj types.Object, fromPackagePath string, logger LoggerCLI) bool { ... }\nfunc TypeIsAccessible(t types.Type, fromPackagePath string, logger LoggerCLI) bool { ... }\n")),(0,o.kt)("p",null,"These functions are a selection of functions that I always implement when I'm generating code in another libraries.\nFeel free to ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/mathbalduino/go-codegen/issues/new"},"suggest new ones"),"."),(0,o.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"Note that almost every helper function expects to receive a logger instance. These helpers are intended to be used inside\nthe ",(0,o.kt)("inlineCode",{parentName:"p"},"*GoParser")," iteration methods (",(0,o.kt)("inlineCode",{parentName:"p"},"IterateInterfaces")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"IterateStructs"),"), so you can just forward the logger received\nvia the callback arguments"))),(0,o.kt)("h2",{id:"callbackonnamedtype"},"CallbackOnNamedType"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func CallbackOnNamedType(fieldType types.Type, callback func(obj *types.Named), logger LoggerCLI) { ... }\n")),(0,o.kt)("p",null,"This function will call the ",(0,o.kt)("inlineCode",{parentName:"p"},"callback")," argument whenever it encounters some ",(0,o.kt)("inlineCode",{parentName:"p"},"NamedType")," (if you don't know what it is,\nread ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/golang/example/blob/master/gotypes/go-types.md"},"this article"),")."),(0,o.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"If the ",(0,o.kt)("inlineCode",{parentName:"p"},"fieldType")," argument has a ",(0,o.kt)("inlineCode",{parentName:"p"},"struct")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"interface")," as it's underlying type, this function will recursively\niterate over its ",(0,o.kt)("inlineCode",{parentName:"p"},"fields"),"/",(0,o.kt)("inlineCode",{parentName:"p"},"methods"),". The ",(0,o.kt)("inlineCode",{parentName:"p"},"callback")," can be called more than just once"))),(0,o.kt)("h2",{id:"resolvetypeidentifier"},"ResolveTypeIdentifier"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func ResolveTypeIdentifier(type_ types.Type, pkgImports GoImports, logger LoggerCLI) string { ... }\n")),(0,o.kt)("p",null,"This function will recursively iterate over the ",(0,o.kt)("inlineCode",{parentName:"p"},"type_")," argument, building its ",(0,o.kt)("inlineCode",{parentName:"p"},"string")," identifier. At the end of its\nexecution, you will have something like this: ",(0,o.kt)("inlineCode",{parentName:"p"},"map[string]uint"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"struct{someField string}"),", etc."),(0,o.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"Since the function takes a list of package imports (the ",(0,o.kt)("inlineCode",{parentName:"p"},"pkgImports")," argument), it can calculate when it's necessary\nto include the name of the package from which some type comes from."),(0,o.kt)("p",{parentName:"div"},"The final type identifier can be both ",(0,o.kt)("inlineCode",{parentName:"p"},"*someType")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"*pkgName.someType"),", depending on the given ",(0,o.kt)("inlineCode",{parentName:"p"},"pkgImports")," argument"))),(0,o.kt)("h2",{id:"identifiertoasciitypename"},"IdentifierToAsciiTypeName"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func IdentifierToAsciiTypeName(typeIdentifier string) string { ... }\n")),(0,o.kt)("p",null,"Sometimes, when generating code, you will need to name the generated types. Some symbols used to build type identifiers\ncannot be used in type names. The ",(0,o.kt)("inlineCode",{parentName:"p"},"map[string]int"),' cannot be converted to a valid type name without modifying some chars\n(the "','[" and "]','" chars are forbidden).'),(0,o.kt)("p",null,"This function will take the type identifier and convert it to a valid type name. The above ",(0,o.kt)("inlineCode",{parentName:"p"},"map[string]int")," example will\nbe converted to something like ",(0,o.kt)("inlineCode",{parentName:"p"},"mapstringint"),". The final result is not that readable, but it works."),(0,o.kt)("p",null,"If you want some readable generated type name, take a look at the next function."),(0,o.kt)("h2",{id:"identifiertotypename"},"IdentifierToTypeName"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func IdentifierToTypeName(typeIdentifier string) string { ... }\n")),(0,o.kt)("p",null,"This function is very similar to the ",(0,o.kt)("inlineCode",{parentName:"p"},"IdentifierToAsciiTypeName")," in the sense that it converts a type identifier into a\nvalid type name. The difference is that it generates type names with custom unicode symbols that resemble the replaced\nchars (I tried ",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("em",{parentName:"strong"},"very"))," hard to keep the generated type names readable)."),(0,o.kt)("p",null,"The type identifier ",(0,o.kt)("inlineCode",{parentName:"p"},"*int"),", for example, will be converted to ",(0,o.kt)("inlineCode",{parentName:"p"},"\u157dint")," (using the custom ",(0,o.kt)("a",{parentName:"p",href:"https://unicode-table.com/en/157D/"},"Canadian Syllabics Hk"),")."),(0,o.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"caution")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"If you need that your types contain only ASCII type names, don't use this function, use the ",(0,o.kt)("inlineCode",{parentName:"p"},"IdentifierToAsciiTypeName"),"\ninstead"))),(0,o.kt)("h2",{id:"objectisaccessible"},"ObjectIsAccessible"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func ObjectIsAccessible(obj types.Object, fromPackagePath string, logger LoggerCLI) bool { ... }\n")),(0,o.kt)("p",null,"If you want to test some ",(0,o.kt)("inlineCode",{parentName:"p"},"types.Object")," to see if you can access it from some specific package, you can give it to this\nfunction, with some package information."),(0,o.kt)("p",null,"The object ",(0,o.kt)("inlineCode",{parentName:"p"},"pkgA.TypeA")," is accessible within the package ",(0,o.kt)("inlineCode",{parentName:"p"},"pkgB"),", because it is exported. The ",(0,o.kt)("inlineCode",{parentName:"p"},"pkgA.typeB")," object is\naccessible within the package ",(0,o.kt)("inlineCode",{parentName:"p"},"pkgA"),", even being private, because it is the same package. And so on..."),(0,o.kt)("h2",{id:"typeisaccessible"},"TypeIsAccessible"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func TypeIsAccessible(t types.Type, fromPackagePath string, logger LoggerCLI) bool { ... }\n")),(0,o.kt)("p",null,"Very similar to the ",(0,o.kt)("inlineCode",{parentName:"p"},"ObjectIsAccessible")," function, but with ",(0,o.kt)("inlineCode",{parentName:"p"},"types.Type")," instead of ",(0,o.kt)("inlineCode",{parentName:"p"},"types.Object"),"."))}m.isMDXComponent=!0}}]);