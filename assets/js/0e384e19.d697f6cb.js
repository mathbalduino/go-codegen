"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[671],{9881:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return d},toc:function(){return p},default:function(){return g}});var a=n(7462),o=n(3366),i=(n(7294),n(3905)),r=["components"],s={sidebar_position:1},l="Introduction",d={unversionedId:"intro",id:"intro",isDocsHomePage:!1,title:"Introduction",description:"go-codegen is a library that acts as a wrapper around golang.org/x/tools, providing an API",source:"@site/docs/intro.md",sourceDirName:".",slug:"/intro",permalink:"/go-codegen/docs/intro",editUrl:"https://github.com/mathbalduino/go-codegen/edit/docs/docs/intro.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",next:{title:"*GoParser API",permalink:"/go-codegen/docs/go-parser-api"}},p=[{value:"Getting Started",id:"getting-started",children:[]},{value:"Files abstraction",id:"files-abstraction",children:[]},{value:"Focus",id:"focus",children:[]}],c={toc:p};function g(e){var t=e.components,n=(0,o.Z)(e,r);return(0,i.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"introduction"},"Introduction"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"go-codegen")," is a library that acts as a wrapper around ",(0,i.kt)("inlineCode",{parentName:"p"},"golang.org/x/tools"),", providing an API\nthat you can use to parse and generate ",(0,i.kt)("inlineCode",{parentName:"p"},"go")," code. It's part of my personal stack, and I use it\nto ease code generation inside another libraries."),(0,i.kt)("p",null,"This library is something like a compilation of the functions, abstractions, etc, all the code\nthat I usually need when generating code. Feel free to contribute, if you want to."),(0,i.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"I don't want to use this library to handle the ",(0,i.kt)("em",{parentName:"p"},"content")," of the generated files, just to provide\ntools that ease the process of code generation (code parsing, type inspection, file abstraction, etc)."),(0,i.kt)("p",{parentName:"div"},"Don't expect to see code related to template generation, etc. This is intended to be implemented by\nyourself when generating your code"))),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"I strongly recommend that you read ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/golang/example/blob/master/gotypes/go-types.md"},"this document about GO types"),",\nto get a deeper understanding about what we'll talk about in the next chapters. I'll assume will have read."))),(0,i.kt)("h2",{id:"getting-started"},"Getting Started"),(0,i.kt)("p",null,"You will need to install ",(0,i.kt)("inlineCode",{parentName:"p"},"go-codegen")," before starting. To do it, execute the following command (inside your ",(0,i.kt)("inlineCode",{parentName:"p"},"go module"),"\nfolder):"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh",metastring:"test",test:!0},"go get github.com/mathbalduino/go-codegen\n")),(0,i.kt)("p",null,"As already said, this library acts as a wrapper around ",(0,i.kt)("inlineCode",{parentName:"p"},"golang.org/x/tools"),", so you will need to create a new\n",(0,i.kt)("inlineCode",{parentName:"p"},"GoParser")," instance (that calls ",(0,i.kt)("inlineCode",{parentName:"p"},"golang.org/x/tools/go/packages.Load"),") in order to use its utility methods. Example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},'package main\n\nimport (\n    "github.com/mathbalduino/go-codegen"\n    "go/types"\n)\n\nfunc main() {\n    config := parser.Config{\n        // ... your configuration ...\n        //\n    }\n    goParser, e := parser.NewGoParser("<your_pattern>", config)\n    if e != nil {\n        panic(e)\n    }\n    \n    e = goParser.IterateStructs(func(struct_ *types.TypeName, logger parser.LoggerCLI) error { \n        // This method will be called once for every struct inside the parsed GO code\n        // Use the given \'struct_\' param to generate your code\n\n        // If you want to stop the iteration, return a non-nil error below\n        // This error will be forwarded to the caller of \'IterateStructs\'\n        return nil\n    })\n    if e != nil {\n        panic(e)\n    }\n}\n')),(0,i.kt)("p",null,"After you get a working instance of ",(0,i.kt)("inlineCode",{parentName:"p"},"*GoParser"),", you can call methods that will iterate over the\nparsed code. With this information, you can generate new code. Currently, you can iterate over ",(0,i.kt)("inlineCode",{parentName:"p"},"structs"),"\nand ",(0,i.kt)("inlineCode",{parentName:"p"},"interfaces"),". For more info, see the ",(0,i.kt)("a",{parentName:"p",href:"/go-codegen/docs/go-parser-api"},"*GoParser API")," section."),(0,i.kt)("p",null,"Don't worry about the configuration, string pattern, etc. All these concepts will be explored in details in the\nnext chapters."),(0,i.kt)("h2",{id:"files-abstraction"},"Files abstraction"),(0,i.kt)("p",null,"If you want to generate ",(0,i.kt)("inlineCode",{parentName:"p"},"go")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"typescript")," code, the library comes with builtin support for this kind\nof files, abstracting the file import list, code formatting and persistence (you can use the same API for\n",(0,i.kt)("inlineCode",{parentName:"p"},"ts")," files). Example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},'package main\n\nimport (\n    "github.com/mathbalduino/go-codegen/goFile"\n)\n\nfunc main() {\n    // ... your goParser instance creation\n    \n    f := goFile.New("filename", "packageName", "destination/package/import/path")\n    e := goParser.IterateStructs(func(struct_ *types.TypeName, logger parser.LoggerCLI) error {\n        generatedCode := generateCodeUsingTemplate(struct_) // or, whatever you want\n        f.AddCode(generatedCode)\n        return nil\n    })\n    if e != nil {\n        panic(e)\n    }\n    \n    // <title> usually is the name of the library that\n    // generated the code\n    // Example: "Code generated by library/import/path v1.2.3"\n    e = f.Save("<title>", "save/to/folder/x")\n    if e != nil {\n        panic(e)\n    }\n    // If there\'s no error, the file has been written to disk\n}\n')),(0,i.kt)("h2",{id:"focus"},"Focus"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"*GoParser"),", by default, will iterate over the entire parsed code. You can control this behavior by giving\na ",(0,i.kt)("inlineCode",{parentName:"p"},"*Focus")," to the ",(0,i.kt)("inlineCode",{parentName:"p"},"Config"),", at the ",(0,i.kt)("inlineCode",{parentName:"p"},"*GoParser")," creation, that tells to the ",(0,i.kt)("inlineCode",{parentName:"p"},"*GoParser"),"\nto iterate only over some ",(0,i.kt)("inlineCode",{parentName:"p"},"typeName"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"filePath"),", etc (for details, see the subsection ",(0,i.kt)("a",{parentName:"p",href:"/go-codegen/docs/go-parser-api#focus"},"Focus"),"):"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},"func FocusPackagePath(packagePath string) *Focus { ... }\nfunc FocusTypeName(typeName string) *Focus { ... }\n// ...\n")),(0,i.kt)("p",null,"Keep reading the docs for details..."))}g.isMDXComponent=!0}}]);